#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift(File.expand_path('../lib', __dir__))
require 'kumonos'

require 'pathname'
require 'thor'

# KumonosCli
class KumonosCli < Thor
  desc 'envoy SERVIVE_NAME', 'Generate envoy configuration'
  method_option :config, aliases: '-c', desc: 'Configuration file for kumonos'
  def envoy(service_name)
    h = JSON.parse(File.read(options[:config]))
    result = Kumonos::Schemas.validate_kumonos_config(h)
    unless result.empty?
      warn("#{options[:config]} has invalid format:")
      warn(result)
      warn("A schema file for kumonos-configuration is #{Kumonos::Schemas::CONFIG_SCHEMA_PATH}")
      exit 1
    end

    config = Kumonos::Configuration.from_hash(h)
    puts JSON.dump(Kumonos.generate(config, service_name))
  end

  desc 'clusters FILEPATH OUT', 'Generate clusters configuration'
  def clusters(filepath, output_dir)
    name = File.basename(filepath, '.*')
    definition = YAML.load_file(filepath)
    validate_service_definition!(definition, filepath)
    out = JSON.dump(Kumonos.generate_clusters(definition))

    output_dir = Pathname.new(output_dir)
    target = output_dir.join('v1', 'clusters', name, name)
    target.parent.mkpath unless target.parent.exist?
    target.write(out)
    puts target
  end

  desc 'routes FILEPATH OUT', 'Generate routes configuration'
  def routes(filepath, output_dir)
    name = File.basename(filepath, '.*')
    definition = YAML.load_file(filepath)
    validate_service_definition!(definition, filepath)
    out = JSON.dump(Kumonos.generate_routes(definition))

    output_dir = Pathname.new(output_dir)
    target = output_dir.join('v1', 'routes', name, name, name)
    target.parent.mkpath unless target.parent.exist?
    target.write(out)
    puts target
  end

  private

  def validate_service_definition!(definition, filepath)
    result = Kumonos::Schemas.validate_service_definition(definition)
    unless result.empty?
      warn("#{filepath} has invalid format:")
      warn(result)
      warn("A schema file is #{Kumonos::Schemas::SERVIVE_DEFINITION_PATH}")
      exit 1
    end
  end
end

KumonosCli.start(ARGV)
