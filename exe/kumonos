#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift(File.expand_path('../lib', __dir__))
require 'kumonos'
require 'thor'

# KumonosCli
class KumonosCli < Thor
  def self.exit_on_failure?
    true
  end

  desc 'envoy ENVOY_DEFINITION', 'Generate envoy configuration'
  method_option :output, aliases: '-o', desc: 'Output path', required: true, type: :string
  method_option :'service-cluster', desc: 'Service cluster', required: true, type: :string
  method_option :'service-node', desc: 'Service node', required: true, type: :string
  def envoy(path)
    validate_path!(path)
    definition = YAML.load_file(path)
    validate_envoy_definition!(definition, path)

    config = Kumonos::Envoy.generate(
      definition,
      cluster: options.fetch(:'service-cluster'),
      node: options.fetch(:'service-node')
    )
    File.write(options.fetch(:output), JSON.dump(config))
  end

  desc 'clusters SERVIVE_DEFINITION', 'Generate clusters configuration'
  method_option :output, aliases: '-o', desc: 'Output directory', required: true, type: :string
  def clusters(filepath)
    output_dir = options.fetch(:output)
    validate_path!(filepath)
    validate_path!(output_dir)

    definition = YAML.load_file(filepath)
    validate_service_definition!(definition, filepath)
    json = JSON.dump(Kumonos::Clusters.generate(definition))

    output = Kumonos::Output.new(output_dir, :clusters, File.basename(filepath, '.*'))
    puts output.write(json)
  end

  desc 'routes SERVIVE_DEFINITION', 'Generate routes configuration'
  method_option :output, aliases: '-o', desc: 'Output directory', required: true, type: :string
  def routes(filepath)
    output_dir = options.fetch(:output)
    validate_path!(filepath)
    validate_path!(output_dir)

    definition = YAML.load_file(filepath)
    validate_service_definition!(definition, filepath)
    json = JSON.dump(Kumonos::Routes.generate(definition))

    output = Kumonos::Output.new(output_dir, :routes, File.basename(filepath, '.*'))
    puts output.write(json)
  end

  desc 'init NAME', 'Generate a service definition'
  def init(name)
    definition = YAML.load_file(File.expand_path('../example/book.yml', __dir__))
    definition['dependencies'] = definition.fetch('dependencies')[0..0]
    dep = definition['dependencies'][0]
    dep['name'] = 'target-service-name'
    dep['cluster_name'] = 'target-service-name-staging'
    dep['lb'] = 'hostname-for-load-balancer:port'
    path = "#{name}.yml"
    File.open(path, 'w') { |f| YAML.dump(definition, f) }
    puts path
  end

  private

  def validate_path!(path)
    return if File.exist?(path)

    warn("No such file or directory: #{path}")
    exit 1
  end

  def validate_envoy_definition!(h, path)
    result = Kumonos::Schemas.validate_envoy_definition(h)
    return if result.empty?
    warn_and_exit(result, path, Kumonos::Schemas::ENVOY_SCHEMA_PATH)
  end

  def validate_service_definition!(h, path)
    result = Kumonos::Schemas.validate_service_definition(h)
    return if result.empty?
    warn_and_exit(result, path, Kumonos::Schemas::SERVIVE_DEFINITION_PATH)
  end

  def warn_and_exit(result, path, schema_path)
    warn("#{path} has invalid format:")
    warn(result)
    warn("The schema file is #{schema_path}")
    exit 1
  end
end

KumonosCli.start(ARGV)
